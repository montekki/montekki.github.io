<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minimal</title>
    <link>https://montekki.github.io/</link>
    <description>Recent content on Minimal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Feb 2019 14:12:31 +0300</lastBuildDate>
    
	<atom:link href="https://montekki.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Procedural macros in Rust</title>
      <link>https://montekki.github.io/posts/procedural-macros-rust/</link>
      <pubDate>Sun, 24 Feb 2019 14:12:31 +0300</pubDate>
      
      <guid>https://montekki.github.io/posts/procedural-macros-rust/</guid>
      <description>Metaprogramming in Rust Howdy ya&amp;rsquo;ll. Today we will be looking into the procedural macros toolset of the Rust programming language.
Rust language provides us with two types of metaprogramming tools:
 declarative macros procedural macros  Features println! or vec! are implemented using declarative macros and features like derive traits are actually procedural macros.
Declarative macros (macro_rules!) operate in the declarative pattern-matching manner, think of it as of feeding some input into a match expression and getting some output.</description>
    </item>
    
  </channel>
</rss>